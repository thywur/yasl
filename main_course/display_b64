#!yasl_linux

{
	= "/" == ? 1 : (
		= "+" == ? 1 : (
			= "0" < ? 0 : (
				= "9" <= ? 1 : (
					= "A" < ? 0 : (
						= "Z" <= ? 1 : (
							= "a" < ? 0 : (
								= "z" <= ? 1 : (0))))))))
}	is_b64 //Add 1 to stack 0 if top of stack 0 is a b64 char, 0 if it is not

{
	= "/" == ? (63) : (
		= "+" == ? (62): (
			= "9" <= ? (= "0" - 52 +) : (
				= "Z" <= ? (= "A" -) : (
					= "z" <= ? (= "a" - 26 +) : (0)))))
}	get_b64_index

// Check that the program did not receive any argument

1
!=
? ("No argument required\n" print 1 exit)

#
#(!)

// Read on the standard input and explode string to stack 1

read
@(
	][:1 1:!
    read
)

1:#
0 == ? ("Error: Empty image\n" print exit 1)

1:#
#(
	1:=
	is_b64
	0 == ? ("Error: " print print " is not a b64 character" print "\n" print 1 exit)
	1:=
	get_b64_index
	=:5
	1:!
)

// Check wether the amount of character read in a multiple of 4

5:#
4
%
0 != ? ("Error: Uncomplete pixel\n" print 1 exit)

// Divide the amount of character read by 4 to get the number of pixels

5:#
4
/
=
"Image received, nb pixels : " print print "\n" print

{
	=:2
	1:3
	@(
		3:=:0
		= *
		= 2:=:0 == ? (3:=:4 0) : (1:3 3:+:3) 	//result saved in stack 4
	)
}	sqrt // Function to get the square root

sqrt
4:# 1 != ? ("Error: Image is not a square\n" print 1 exit)

4:=
"Found square : " print print "\n" print

{
	"\e[48;2;" print
	5:= 5:!
	2 <<
	5:=
	4 >>
	|
	256 %
	print ";" print
	5:= 5:!
	4 <<
	5:=
	2 >>
	|
	256 %
	print ";" print
	5:= 5:!
	6 <<
	5:= 5:!
	|
	256 %
	print "m  \e[0m" print
}	print_pixel

4:=
#(
	4:=
	#(print_pixel)
	"\n" print
)
